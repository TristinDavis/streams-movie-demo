/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.demo;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Movie extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5093465018952603972L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Movie\",\"namespace\":\"io.confluent.demo\",\"fields\":[{\"name\":\"movie_id\",\"type\":\"long\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"release_year\",\"type\":\"int\"},{\"name\":\"country\",\"type\":\"string\"},{\"name\":\"genres\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"actors\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"directors\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"composers\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"screenwriters\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"cinematographer\",\"type\":\"string\"},{\"name\":\"production_companies\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Movie> ENCODER =
      new BinaryMessageEncoder<Movie>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Movie> DECODER =
      new BinaryMessageDecoder<Movie>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Movie> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Movie> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Movie>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Movie to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Movie from a ByteBuffer. */
  public static Movie fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long movie_id;
  @Deprecated public java.lang.CharSequence title;
  @Deprecated public int release_year;
  @Deprecated public java.lang.CharSequence country;
  @Deprecated public java.util.List<java.lang.CharSequence> genres;
  @Deprecated public java.util.List<java.lang.CharSequence> actors;
  @Deprecated public java.util.List<java.lang.CharSequence> directors;
  @Deprecated public java.util.List<java.lang.CharSequence> composers;
  @Deprecated public java.util.List<java.lang.CharSequence> screenwriters;
  @Deprecated public java.lang.CharSequence cinematographer;
  @Deprecated public java.util.List<java.lang.CharSequence> production_companies;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Movie() {}

  /**
   * All-args constructor.
   * @param movie_id The new value for movie_id
   * @param title The new value for title
   * @param release_year The new value for release_year
   * @param country The new value for country
   * @param genres The new value for genres
   * @param actors The new value for actors
   * @param directors The new value for directors
   * @param composers The new value for composers
   * @param screenwriters The new value for screenwriters
   * @param cinematographer The new value for cinematographer
   * @param production_companies The new value for production_companies
   */
  public Movie(java.lang.Long movie_id, java.lang.CharSequence title, java.lang.Integer release_year, java.lang.CharSequence country, java.util.List<java.lang.CharSequence> genres, java.util.List<java.lang.CharSequence> actors, java.util.List<java.lang.CharSequence> directors, java.util.List<java.lang.CharSequence> composers, java.util.List<java.lang.CharSequence> screenwriters, java.lang.CharSequence cinematographer, java.util.List<java.lang.CharSequence> production_companies) {
    this.movie_id = movie_id;
    this.title = title;
    this.release_year = release_year;
    this.country = country;
    this.genres = genres;
    this.actors = actors;
    this.directors = directors;
    this.composers = composers;
    this.screenwriters = screenwriters;
    this.cinematographer = cinematographer;
    this.production_companies = production_companies;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return movie_id;
    case 1: return title;
    case 2: return release_year;
    case 3: return country;
    case 4: return genres;
    case 5: return actors;
    case 6: return directors;
    case 7: return composers;
    case 8: return screenwriters;
    case 9: return cinematographer;
    case 10: return production_companies;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: movie_id = (java.lang.Long)value$; break;
    case 1: title = (java.lang.CharSequence)value$; break;
    case 2: release_year = (java.lang.Integer)value$; break;
    case 3: country = (java.lang.CharSequence)value$; break;
    case 4: genres = (java.util.List<java.lang.CharSequence>)value$; break;
    case 5: actors = (java.util.List<java.lang.CharSequence>)value$; break;
    case 6: directors = (java.util.List<java.lang.CharSequence>)value$; break;
    case 7: composers = (java.util.List<java.lang.CharSequence>)value$; break;
    case 8: screenwriters = (java.util.List<java.lang.CharSequence>)value$; break;
    case 9: cinematographer = (java.lang.CharSequence)value$; break;
    case 10: production_companies = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'movie_id' field.
   * @return The value of the 'movie_id' field.
   */
  public java.lang.Long getMovieId() {
    return movie_id;
  }

  /**
   * Sets the value of the 'movie_id' field.
   * @param value the value to set.
   */
  public void setMovieId(java.lang.Long value) {
    this.movie_id = value;
  }

  /**
   * Gets the value of the 'title' field.
   * @return The value of the 'title' field.
   */
  public java.lang.CharSequence getTitle() {
    return title;
  }

  /**
   * Sets the value of the 'title' field.
   * @param value the value to set.
   */
  public void setTitle(java.lang.CharSequence value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'release_year' field.
   * @return The value of the 'release_year' field.
   */
  public java.lang.Integer getReleaseYear() {
    return release_year;
  }

  /**
   * Sets the value of the 'release_year' field.
   * @param value the value to set.
   */
  public void setReleaseYear(java.lang.Integer value) {
    this.release_year = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public java.lang.CharSequence getCountry() {
    return country;
  }

  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.CharSequence value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'genres' field.
   * @return The value of the 'genres' field.
   */
  public java.util.List<java.lang.CharSequence> getGenres() {
    return genres;
  }

  /**
   * Sets the value of the 'genres' field.
   * @param value the value to set.
   */
  public void setGenres(java.util.List<java.lang.CharSequence> value) {
    this.genres = value;
  }

  /**
   * Gets the value of the 'actors' field.
   * @return The value of the 'actors' field.
   */
  public java.util.List<java.lang.CharSequence> getActors() {
    return actors;
  }

  /**
   * Sets the value of the 'actors' field.
   * @param value the value to set.
   */
  public void setActors(java.util.List<java.lang.CharSequence> value) {
    this.actors = value;
  }

  /**
   * Gets the value of the 'directors' field.
   * @return The value of the 'directors' field.
   */
  public java.util.List<java.lang.CharSequence> getDirectors() {
    return directors;
  }

  /**
   * Sets the value of the 'directors' field.
   * @param value the value to set.
   */
  public void setDirectors(java.util.List<java.lang.CharSequence> value) {
    this.directors = value;
  }

  /**
   * Gets the value of the 'composers' field.
   * @return The value of the 'composers' field.
   */
  public java.util.List<java.lang.CharSequence> getComposers() {
    return composers;
  }

  /**
   * Sets the value of the 'composers' field.
   * @param value the value to set.
   */
  public void setComposers(java.util.List<java.lang.CharSequence> value) {
    this.composers = value;
  }

  /**
   * Gets the value of the 'screenwriters' field.
   * @return The value of the 'screenwriters' field.
   */
  public java.util.List<java.lang.CharSequence> getScreenwriters() {
    return screenwriters;
  }

  /**
   * Sets the value of the 'screenwriters' field.
   * @param value the value to set.
   */
  public void setScreenwriters(java.util.List<java.lang.CharSequence> value) {
    this.screenwriters = value;
  }

  /**
   * Gets the value of the 'cinematographer' field.
   * @return The value of the 'cinematographer' field.
   */
  public java.lang.CharSequence getCinematographer() {
    return cinematographer;
  }

  /**
   * Sets the value of the 'cinematographer' field.
   * @param value the value to set.
   */
  public void setCinematographer(java.lang.CharSequence value) {
    this.cinematographer = value;
  }

  /**
   * Gets the value of the 'production_companies' field.
   * @return The value of the 'production_companies' field.
   */
  public java.util.List<java.lang.CharSequence> getProductionCompanies() {
    return production_companies;
  }

  /**
   * Sets the value of the 'production_companies' field.
   * @param value the value to set.
   */
  public void setProductionCompanies(java.util.List<java.lang.CharSequence> value) {
    this.production_companies = value;
  }

  /**
   * Creates a new Movie RecordBuilder.
   * @return A new Movie RecordBuilder
   */
  public static io.confluent.demo.Movie.Builder newBuilder() {
    return new io.confluent.demo.Movie.Builder();
  }

  /**
   * Creates a new Movie RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Movie RecordBuilder
   */
  public static io.confluent.demo.Movie.Builder newBuilder(io.confluent.demo.Movie.Builder other) {
    return new io.confluent.demo.Movie.Builder(other);
  }

  /**
   * Creates a new Movie RecordBuilder by copying an existing Movie instance.
   * @param other The existing instance to copy.
   * @return A new Movie RecordBuilder
   */
  public static io.confluent.demo.Movie.Builder newBuilder(io.confluent.demo.Movie other) {
    return new io.confluent.demo.Movie.Builder(other);
  }

  /**
   * RecordBuilder for Movie instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Movie>
    implements org.apache.avro.data.RecordBuilder<Movie> {

    private long movie_id;
    private java.lang.CharSequence title;
    private int release_year;
    private java.lang.CharSequence country;
    private java.util.List<java.lang.CharSequence> genres;
    private java.util.List<java.lang.CharSequence> actors;
    private java.util.List<java.lang.CharSequence> directors;
    private java.util.List<java.lang.CharSequence> composers;
    private java.util.List<java.lang.CharSequence> screenwriters;
    private java.lang.CharSequence cinematographer;
    private java.util.List<java.lang.CharSequence> production_companies;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.confluent.demo.Movie.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.movie_id)) {
        this.movie_id = data().deepCopy(fields()[0].schema(), other.movie_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.release_year)) {
        this.release_year = data().deepCopy(fields()[2].schema(), other.release_year);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.country)) {
        this.country = data().deepCopy(fields()[3].schema(), other.country);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.genres)) {
        this.genres = data().deepCopy(fields()[4].schema(), other.genres);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.actors)) {
        this.actors = data().deepCopy(fields()[5].schema(), other.actors);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.directors)) {
        this.directors = data().deepCopy(fields()[6].schema(), other.directors);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.composers)) {
        this.composers = data().deepCopy(fields()[7].schema(), other.composers);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.screenwriters)) {
        this.screenwriters = data().deepCopy(fields()[8].schema(), other.screenwriters);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.cinematographer)) {
        this.cinematographer = data().deepCopy(fields()[9].schema(), other.cinematographer);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.production_companies)) {
        this.production_companies = data().deepCopy(fields()[10].schema(), other.production_companies);
        fieldSetFlags()[10] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Movie instance
     * @param other The existing instance to copy.
     */
    private Builder(io.confluent.demo.Movie other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.movie_id)) {
        this.movie_id = data().deepCopy(fields()[0].schema(), other.movie_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.release_year)) {
        this.release_year = data().deepCopy(fields()[2].schema(), other.release_year);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.country)) {
        this.country = data().deepCopy(fields()[3].schema(), other.country);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.genres)) {
        this.genres = data().deepCopy(fields()[4].schema(), other.genres);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.actors)) {
        this.actors = data().deepCopy(fields()[5].schema(), other.actors);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.directors)) {
        this.directors = data().deepCopy(fields()[6].schema(), other.directors);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.composers)) {
        this.composers = data().deepCopy(fields()[7].schema(), other.composers);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.screenwriters)) {
        this.screenwriters = data().deepCopy(fields()[8].schema(), other.screenwriters);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.cinematographer)) {
        this.cinematographer = data().deepCopy(fields()[9].schema(), other.cinematographer);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.production_companies)) {
        this.production_companies = data().deepCopy(fields()[10].schema(), other.production_companies);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'movie_id' field.
      * @return The value.
      */
    public java.lang.Long getMovieId() {
      return movie_id;
    }

    /**
      * Sets the value of the 'movie_id' field.
      * @param value The value of 'movie_id'.
      * @return This builder.
      */
    public io.confluent.demo.Movie.Builder setMovieId(long value) {
      validate(fields()[0], value);
      this.movie_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'movie_id' field has been set.
      * @return True if the 'movie_id' field has been set, false otherwise.
      */
    public boolean hasMovieId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'movie_id' field.
      * @return This builder.
      */
    public io.confluent.demo.Movie.Builder clearMovieId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'title' field.
      * @return The value.
      */
    public java.lang.CharSequence getTitle() {
      return title;
    }

    /**
      * Sets the value of the 'title' field.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public io.confluent.demo.Movie.Builder setTitle(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.title = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'title' field.
      * @return This builder.
      */
    public io.confluent.demo.Movie.Builder clearTitle() {
      title = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'release_year' field.
      * @return The value.
      */
    public java.lang.Integer getReleaseYear() {
      return release_year;
    }

    /**
      * Sets the value of the 'release_year' field.
      * @param value The value of 'release_year'.
      * @return This builder.
      */
    public io.confluent.demo.Movie.Builder setReleaseYear(int value) {
      validate(fields()[2], value);
      this.release_year = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'release_year' field has been set.
      * @return True if the 'release_year' field has been set, false otherwise.
      */
    public boolean hasReleaseYear() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'release_year' field.
      * @return This builder.
      */
    public io.confluent.demo.Movie.Builder clearReleaseYear() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public java.lang.CharSequence getCountry() {
      return country;
    }

    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public io.confluent.demo.Movie.Builder setCountry(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.country = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public io.confluent.demo.Movie.Builder clearCountry() {
      country = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'genres' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getGenres() {
      return genres;
    }

    /**
      * Sets the value of the 'genres' field.
      * @param value The value of 'genres'.
      * @return This builder.
      */
    public io.confluent.demo.Movie.Builder setGenres(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.genres = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'genres' field has been set.
      * @return True if the 'genres' field has been set, false otherwise.
      */
    public boolean hasGenres() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'genres' field.
      * @return This builder.
      */
    public io.confluent.demo.Movie.Builder clearGenres() {
      genres = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'actors' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getActors() {
      return actors;
    }

    /**
      * Sets the value of the 'actors' field.
      * @param value The value of 'actors'.
      * @return This builder.
      */
    public io.confluent.demo.Movie.Builder setActors(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[5], value);
      this.actors = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'actors' field has been set.
      * @return True if the 'actors' field has been set, false otherwise.
      */
    public boolean hasActors() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'actors' field.
      * @return This builder.
      */
    public io.confluent.demo.Movie.Builder clearActors() {
      actors = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'directors' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getDirectors() {
      return directors;
    }

    /**
      * Sets the value of the 'directors' field.
      * @param value The value of 'directors'.
      * @return This builder.
      */
    public io.confluent.demo.Movie.Builder setDirectors(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[6], value);
      this.directors = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'directors' field has been set.
      * @return True if the 'directors' field has been set, false otherwise.
      */
    public boolean hasDirectors() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'directors' field.
      * @return This builder.
      */
    public io.confluent.demo.Movie.Builder clearDirectors() {
      directors = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'composers' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getComposers() {
      return composers;
    }

    /**
      * Sets the value of the 'composers' field.
      * @param value The value of 'composers'.
      * @return This builder.
      */
    public io.confluent.demo.Movie.Builder setComposers(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[7], value);
      this.composers = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'composers' field has been set.
      * @return True if the 'composers' field has been set, false otherwise.
      */
    public boolean hasComposers() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'composers' field.
      * @return This builder.
      */
    public io.confluent.demo.Movie.Builder clearComposers() {
      composers = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'screenwriters' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getScreenwriters() {
      return screenwriters;
    }

    /**
      * Sets the value of the 'screenwriters' field.
      * @param value The value of 'screenwriters'.
      * @return This builder.
      */
    public io.confluent.demo.Movie.Builder setScreenwriters(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[8], value);
      this.screenwriters = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'screenwriters' field has been set.
      * @return True if the 'screenwriters' field has been set, false otherwise.
      */
    public boolean hasScreenwriters() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'screenwriters' field.
      * @return This builder.
      */
    public io.confluent.demo.Movie.Builder clearScreenwriters() {
      screenwriters = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'cinematographer' field.
      * @return The value.
      */
    public java.lang.CharSequence getCinematographer() {
      return cinematographer;
    }

    /**
      * Sets the value of the 'cinematographer' field.
      * @param value The value of 'cinematographer'.
      * @return This builder.
      */
    public io.confluent.demo.Movie.Builder setCinematographer(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.cinematographer = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'cinematographer' field has been set.
      * @return True if the 'cinematographer' field has been set, false otherwise.
      */
    public boolean hasCinematographer() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'cinematographer' field.
      * @return This builder.
      */
    public io.confluent.demo.Movie.Builder clearCinematographer() {
      cinematographer = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'production_companies' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getProductionCompanies() {
      return production_companies;
    }

    /**
      * Sets the value of the 'production_companies' field.
      * @param value The value of 'production_companies'.
      * @return This builder.
      */
    public io.confluent.demo.Movie.Builder setProductionCompanies(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[10], value);
      this.production_companies = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'production_companies' field has been set.
      * @return True if the 'production_companies' field has been set, false otherwise.
      */
    public boolean hasProductionCompanies() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'production_companies' field.
      * @return This builder.
      */
    public io.confluent.demo.Movie.Builder clearProductionCompanies() {
      production_companies = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Movie build() {
      try {
        Movie record = new Movie();
        record.movie_id = fieldSetFlags()[0] ? this.movie_id : (java.lang.Long) defaultValue(fields()[0]);
        record.title = fieldSetFlags()[1] ? this.title : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.release_year = fieldSetFlags()[2] ? this.release_year : (java.lang.Integer) defaultValue(fields()[2]);
        record.country = fieldSetFlags()[3] ? this.country : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.genres = fieldSetFlags()[4] ? this.genres : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[4]);
        record.actors = fieldSetFlags()[5] ? this.actors : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[5]);
        record.directors = fieldSetFlags()[6] ? this.directors : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[6]);
        record.composers = fieldSetFlags()[7] ? this.composers : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[7]);
        record.screenwriters = fieldSetFlags()[8] ? this.screenwriters : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[8]);
        record.cinematographer = fieldSetFlags()[9] ? this.cinematographer : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.production_companies = fieldSetFlags()[10] ? this.production_companies : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[10]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Movie>
    WRITER$ = (org.apache.avro.io.DatumWriter<Movie>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Movie>
    READER$ = (org.apache.avro.io.DatumReader<Movie>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
